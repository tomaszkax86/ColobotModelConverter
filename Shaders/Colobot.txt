shader_type spatial;
render_mode cull_back, depth_draw_alpha_prepass;

uniform vec4 albedo_color : hint_color = vec4(1.0);
uniform sampler2D albedo_texture : hint_albedo;
uniform sampler2D dirt_texture : hint_albedo;
uniform int transparency : hint_range(0, 3) = 0;

uniform bool energy_enabled = false;
uniform float energy_level : hint_range(0.0, 1.0) = 1.0;

uniform bool tracker_1_enabled = false;
uniform float tracker_1_position : hint_range(-1.0, 1.0) = 0.0;

uniform bool tracker_2_enabled = false;
uniform float tracker_2_position : hint_range(-1.0, 1.0) = 0.0;

void fragment()
{
	vec2 uv = UV;
	
	// add energy level if enabled
	uv += mix(vec2(0.0), vec2(0.0, -(1.0 - energy_level) * 0.25), float(energy_enabled));
	
	float tracker_1 = mod(tracker_1_position, 1.0);
	float tracker_2 = mod(tracker_2_position, 1.0);
	
	// add tracker position if enabled
	uv += mix(vec2(0.0), vec2(tracker_1, 0.0), float(tracker_1_enabled));
	uv += mix(vec2(0.0), vec2(tracker_2, 0.0), float(tracker_2_enabled));
	
	vec4 color = texture(albedo_texture, uv) * albedo_color;
	vec4 dirt = texture(dirt_texture, UV2);
	
	ALBEDO = color.rgb * dirt.rgb;
	
	{ALPHA_TRANSPARENCY}
}
