[gd_scene load_steps=11 format=2]

[ext_resource path="res://Converter/ColobotMeshInstance.tscn" type="PackedScene" id=1]

[sub_resource type="GDScript" id=1]
script/source = "extends Spatial

var _captured = false

onready var _model = $Model
onready var _grid = $Grid
onready var _axes = $Axes
onready var _grass = $Grass
onready var _wireframe = $Wireframe
onready var _normals = $Normals
onready var _pivot = $CameraPivot
onready var _camera = $CameraPivot/Camera

func _input(event):
	if event is InputEventMouseButton:
		if event.button_index == BUTTON_RIGHT:
			if event.pressed:
				Input.set_mouse_mode(Input.MOUSE_MODE_CAPTURED)
			else:
				Input.set_mouse_mode(Input.MOUSE_MODE_VISIBLE)
			_captured = event.pressed
		
		if _captured:
			if event.button_index == BUTTON_WHEEL_UP:
				_camera.translation.z *= 0.95
			if event.button_index == BUTTON_WHEEL_DOWN:
				_camera.translation.z /= 0.95

	if _captured and event is InputEventMouseMotion:
		_pivot.rotation_degrees.y -= event.relative.x * 0.1
		_pivot.rotation_degrees.x -= event.relative.y * 0.1
		

func _update_materials():
	var mesh = _model.colobot_model
	
	var materials : Array = []
	
	for triangle in mesh.triangles:
		var index = -1
		
		for i in range(materials.size()):
			if triangle.material.equals(materials[i]):
				index = i
				break
		
		if index == -1:
			triangle.index = materials.size()
			materials.append(triangle.material)
		else:
			triangle.index = index
	
	get_tree().call_group(\"ui\", \"set_materials\", materials)

func set_grid_visible(visible):
	_grid.visible = visible

func set_axes_visible(visible):
	_axes.visible = visible

func set_grass_visible(visible):
	_grass.visible = visible

func set_model_visible(visible):
	_model.visible = visible

func set_wireframe_visible(visible):
	_wireframe.visible = visible

func set_normals_visible(visible):
	_normals.visible = visible

func load_model(path):
	if path.ends_with(\".mod\"):
		_model.load_mod(path)
	elif path.ends_with(\".gltf\"):
		_model.load_gltf(path)
	elif path.ends_with(\".txt\"):
		_model.load_txt(path)
	else:
		return
	
	_wireframe.mesh = null
	_normals.mesh = null
	
	if _model.mesh:
		var aabb = _model.get_aabb()
		var h = aabb.position.y + 0.5 * aabb.size.y
		_pivot.translation.y = h
		
		_update_materials()
		
		_wireframe.mesh = _model.to_wireframe()
		_normals.mesh = _model.to_normals()

func save_model(path):
	if path.ends_with(\".mod\"):
		_model.save_mod(path)
	elif path.ends_with(\".gltf\"):
		_model.save_gltf(path)
	elif path.ends_with(\".txt\"):
		_model.save_txt(path)

func close_model():
	_model.mesh = null
	_pivot.translation.y = 0.0

func set_energy_level(value):
	_model.energy_level = value

func set_tracker_1_level(value):
	_model.tracker_1_position = value

func set_tracker_2_level(value):
	_model.tracker_2_position = value
"

[sub_resource type="GDScript" id=2]
script/source = "extends MeshInstance

func _ready():
    var st = SurfaceTool.new()
    var mat = SpatialMaterial.new()
    
    mat.vertex_color_use_as_albedo = true
    mat.flags_unshaded = true
    
    var scale = 2.5
    
    st.begin(Mesh.PRIMITIVE_LINES)
    
    st.add_color(Color(0.1, 0.1, 0.1))
    
    for x in range(-10.0, +11.0):
        for z in range(-10.0, +11.0):
            st.add_vertex(scale * Vector3(x, 0.0, -10.0))
            st.add_vertex(scale * Vector3(x, 0.0, +10.0))
            
            st.add_vertex(scale * Vector3(-10.0, 0.0, z))
            st.add_vertex(scale * Vector3(+10.0, 0.0, z))
    
    st.set_material(mat)
    
    mesh = st.commit()
"

[sub_resource type="GDScript" id=3]
script/source = "extends MeshInstance

func _ready():
    var st = SurfaceTool.new()
    var mat = SpatialMaterial.new()
    
    mat.vertex_color_use_as_albedo = true
    mat.flags_unshaded = true
    
    var scale = 2.5
    
    st.begin(Mesh.PRIMITIVE_LINES)
    
    st.add_color(Color.red)
    st.add_vertex(scale * Vector3(0.0, 0.0, 0.0))
    st.add_vertex(scale * Vector3(10.0, 0.0, 0.0))
    
    st.add_color(Color.green)
    st.add_vertex(scale * Vector3(0.0, 0.0, 0.0))
    st.add_vertex(scale * Vector3(0.0, 10.0, 0.0))
    
    st.add_color(Color.blue)
    st.add_vertex(scale * Vector3(0.0, 0.0, 0.0))
    st.add_vertex(scale * Vector3(0.0, 0.0, 10.0))
    
    st.set_material(mat)
    
    mesh = st.commit()
"

[sub_resource type="OpenSimplexNoise" id=4]
period = 10.0

[sub_resource type="NoiseTexture" id=5]
seamless = true
noise = SubResource( 4 )

[sub_resource type="SpatialMaterial" id=6]
albedo_color = Color( 0.352941, 1, 0.360784, 1 )
albedo_texture = SubResource( 5 )
uv1_triplanar = true

[sub_resource type="PlaneMesh" id=7]
material = SubResource( 6 )
size = Vector2( 100, 100 )

[sub_resource type="SpatialMaterial" id=8]
flags_unshaded = true

[sub_resource type="SpatialMaterial" id=9]
flags_unshaded = true

[node name="ModelViewer" type="Spatial" groups=[
"viewer",
]]
script = SubResource( 1 )

[node name="Model" parent="." instance=ExtResource( 1 )]

[node name="Grid" type="MeshInstance" parent="."]
script = SubResource( 2 )

[node name="Axes" type="MeshInstance" parent="."]
visible = false
script = SubResource( 3 )

[node name="Grass" type="MeshInstance" parent="."]
visible = false
mesh = SubResource( 7 )
material/0 = null

[node name="Wireframe" type="MeshInstance" parent="."]
visible = false
material_override = SubResource( 8 )

[node name="Normals" type="MeshInstance" parent="."]
visible = false
material_override = SubResource( 9 )

[node name="CameraPivot" type="Spatial" parent="."]
transform = Transform( 0.866025, -0.25, 0.433013, 0, 0.866025, 0.5, -0.5, -0.433013, 0.75, 0, 0, 0 )

[node name="Camera" type="Camera" parent="CameraPivot"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 10 )
current = true
fov = 90.0
far = 2000.0

[node name="DirectionalLight" type="DirectionalLight" parent="."]
transform = Transform( 0.707107, -0.5, 0.5, 0, 0.707107, 0.707107, -0.707107, -0.5, 0.5, 20, 20, 20 )
